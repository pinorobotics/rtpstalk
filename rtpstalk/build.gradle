// include xfunction for updateVersion
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.github.lambdaprime:id.xfunction:23.0"
  }
}

plugins {
  id 'com.diffplug.spotless'
  // only if you build Java library
  id 'java-library'
}

boolean isReleaseBuild() {
  return version != null && version.matches("\\d+[.\\d+]*");
}

apply plugin : 'eclipse'

eclipse.classpath.file {
  // instruct eclipse plugin to put everything to module path
  whenMerged {
    entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
  }
}

dependencies {
  zzApiDependencies.split(',').each { api it }
}

jar {
  manifest { 
    attributes 'Implementation-Version': "${version}"
  }
}

sourceSets {
  main {
    java {
      srcDirs += ["src/main/gen/java"]
    }
  }
}

javadoc {
  options.noTimestamp = true
  options.noQualifiers = ["all"]
  options.noTree = true
  options.noIndex = true
  options.noNavBar = true
  // ignore missing @return, @param etc
  options.addBooleanOption('Xdoclint:all,-missing', true)
  options.addStringOption('-show-packages', 'exported')
  if (!zzJavadocLinks.isBlank()) {
    // should point to location of element-list files
    options.addMultilineStringsOption("link").value = Arrays.asList(zzJavadocLinks.split(','))
  }
  // Gradle does not support exclude correctly:
  // https://github.com/gradle/gradle/issues/19726
  def sourceSetDirectories = sourceSets
    .main
    .java
    .sourceDirectories
    .getFiles()
    .stream()
    .filter({f -> f.exists()})
    .map({f -> f.toString() })
    .collect(java.util.stream.Collectors.joining(":"))
  def moduleSourcePath = []
  moduleSourcePath += "${zzName}=" + sourceSetDirectories
  // to support @inheritDoc we need to provide sources for inherited
  // classes as part of '--module-source-path' option
  // we use "Module-specific form" for that.
  // https://docs.oracle.com/en/java/javase/18/docs/specs/man/javac.html#the-module-source-path-option
  zzJavadocInheritFrom.split(',').findAll{ !it.isBlank() }.each {
    def path = "${it}=${project.rootDir}/../${it}/${it}/src/main/java"
    def srcGen = "${project.rootDir}/../${it}/${it}/src/main/gen/java"
    if (file(srcGen).exists()) path += ":" + srcGen
    moduleSourcePath += path
  }
  options.addMultilineStringsOption("-module-source-path").value = moduleSourcePath.stream().map(Object::toString).toList()
  exclude "${zzNamespace}/${zzName}/impl/**"
  // Gradle javadoc considers all from java sourceSet only
  // This means that doc-files/* are excluded which is not
  // very compliant to javadoc https://docs.oracle.com/en/java/javase/13/javadoc/source-files.html
  // to fix that we copy doc-files/* manually
  doLast {
    copy {
      from "${zzName}/src/main/java"
      into "$project.docsDir/javadoc/${zzName}"
      include "**/doc-files/*"
    }
  }
}

def packageDir = "$buildDir/package/${zzName}"

task createRelease(type: Zip) {
  archiveFileName = "$releaseFileName"
  destinationDirectory = file("$projectDir/release")
  from file("$packageDir/..")
}

task copyLibs(type: Copy) {
  from configurations.runtimeClasspath
  from jar.archiveFile
  into "${packageDir}/libs"
}

task copyExamples(type: Copy) {
  from("${project.rootDir}/${zzName}.examples/generic/src") {
    include "**"
  }
  into "${packageDir}/examples"
}

task createPackage(type: Copy, dependsOn: [copyLibs, copyExamples]) {
  zzFilesToPackage.split(',').findAll{ !it.isBlank() }.each {
    def filePath = "${project.rootDir}/" + it
    assert file(filePath).exists()
    from filePath
  }
  into packageDir
}

task cleanRelease(type: Delete) {
  delete "$packageDir"
  delete "$projectDir/release/*-SNAPSHOT.zip"
}

createRelease.dependsOn createPackage, javadoc
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply

task updateVersion() {
  // update version only during release build
  if (!isReleaseBuild()) return;
  println "Updating version to " + version
  new id.xfunction.text.Substitutor()
    .withRegexpSupport()
    .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
      "io.github.${zzNamespace}:${zzName}:[0-9.]+".toString(),
      "io.github.${zzNamespace}:${zzName}:${version}".toString()
    ));
}
createRelease.dependsOn updateVersion

if (project.hasProperty('publish')) {

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = zzName
        groupId = "io.github.${zzNamespace}"
        from components.java
        pom {
          name = zzName
          description = zzDescription
          url = zzUrl

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = zzDevName
              email = zzDevEmail
            }
          }

          scm {
            url = zzRepoUrl
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}
