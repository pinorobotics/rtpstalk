plugins {
    id 'java'
    id "com.diffplug.spotless" version "6.3.0"
}

apply plugin : 'eclipse'

dependencies {
   implementation 'io.github.lambdaprime:id.xfunction:16.0-SNAPSHOT'
   implementation 'io.github.lambdaprime:kineticstreamer:4.0-SNAPSHOT'

   // transitively export following dependency to tests project
   apiElements 'io.github.lambdaprime:id.xfunction:16.0-SNAPSHOT'
   apiElements 'io.github.lambdaprime:kineticstreamer:4.0-SNAPSHOT'
}

sourceCompatibility = '17'
targetCompatibility = '17'

// "Pattern Matching for switch Expressions and Statements" is still preview in Java 17
// https://docs.oracle.com/en/java/javase/17/language/pattern-matching.html
compileJava.options.compilerArgs += ['--enable-preview']
javadoc.options.addBooleanOption('-enable-preview', true)
javadoc.options.addStringOption('-release', "${compileJava.sourceCompatibility}")

javadoc {
    options.noTimestamp = true
    options.noQualifiers = ["all"]
    options.noTree = true
    options.noIndex = true
    options.noNavBar = true
    options.overview = "src/overview.html"
    // ignore missing @return, @param etc
    options.addBooleanOption('Xdoclint:all,-missing', true)
}

spotless {
    java {
        importOrder()
        removeUnusedImports()

        // Use Android style which has 4 whitespaces instead 2 by default
        googleJavaFormat().aosp().reflowLongStrings()

        licenseHeader '''/*
 * Copyright $YEAR rtpstalk project
 * 
 * Website: https://github.com/pinorobotics/rtpstalk
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'''
    }
}
// run spotless and format code before the build
classes.dependsOn spotlessApply

def packageDir = "$buildDir/package/${projectName}"

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    from jar.archiveFile
    into "${packageDir}/libs"
}

task createPackage(type: Copy, dependsOn: copyLibs) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    into packageDir
}

task cleanRelease(type: Delete) {
    delete "$packageDir"
    delete "$projectDir/release"
}

createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

task updateVersion() {
    if (version.contains("SNAPSHOT")) return;
    println "Updating version to " + version
    new id.xfunction.text.Substitutor()
        .withRegexpSupport()
        .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
            "io.github.pinorobotics:rtpstalk:[0-9.]+", "io.github.pinorobotics:rtpstalk:" + version
        ));
}

createPackage.dependsOn updateVersion
