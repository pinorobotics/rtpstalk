// include xfunction for updateVersion
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.github.lambdaprime:id.xfunction:14.0"
  }
}

plugins {
  id 'com.diffplug.spotless'
}

apply plugin : 'eclipse'

eclipse.classpath.file {
  // instruct eclipse plugin to put everything to module path
  whenMerged {
    entries.findAll { it.kind == 'lib' }.each { it.entryAttributes['module'] = 'true' }
  }
}

dependencies {
  addDependencies(this, ["implementation", "apiElements"], "20.0", [
    "io.github.lambdaprime:id.xfunction"
  ]);
  addDependencies(this, ["implementation", "apiElements"], "5.0", [
    "io.github.lambdaprime:kineticstreamer"
  ]);
}

javadoc {
    options.noTimestamp = true
    options.noQualifiers = ["all"]
    options.noTree = true
    options.noIndex = true
    options.noNavBar = true
    // ignore missing @return, @param etc
    options.addBooleanOption('Xdoclint:all,-missing', true)
    exclude 'pinorobotics/rtpstalk/impl/**'
}

def packageDir = "$buildDir/package/${projectName}"

task createRelease(type: Zip) {
  archiveFileName = "$releaseFileName"
  destinationDirectory = file("$projectDir/release")
  from file("$packageDir/..")
}

task copyLibs(type: Copy) {
  from configurations.runtimeClasspath
  from jar.archiveFile
  into "${packageDir}/libs"
}

task createPackage(type: Copy, dependsOn: copyLibs) {
  from "${project.rootDir}/README.md"
  from "${project.rootDir}/LICENSE-2.0.txt"
  into packageDir
}

task cleanRelease(type: Delete) {
  delete "$packageDir"
  delete "$projectDir/release/*-SNAPSHOT.zip"
}

createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

// run spotless and format code before the build
classes.dependsOn spotlessApply

if (project.hasProperty('publish')) {

  // update version only during publishing
  task updateVersion() {
    if (version.contains("SNAPSHOT")) return;
    println "Updating version to " + version
    new id.xfunction.text.Substitutor()
      .withRegexpSupport()
      .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
        "io.github.pinorobotics:rtpstalk:[0-9.]+", "io.github.pinorobotics:rtpstalk:" + version
    ));
  }
  createPackage.dependsOn updateVersion

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'rtpstalk'
        groupId = 'io.github.pinorobotics'
        from components.java
        pom {
          name = 'rtpstalk'
          description = 'Java client for RTPS (Real-time Publish-Subscribe) protocol'
          url = 'http://pinoweb.freetzi.com/rtpstalk'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'aeon'
              email = 'aeon_flux@eclipso.ch'
            }
            developer {
              id = 'lambdaprime'
              email = 'intid@protonmail.com'
            }
          }

          scm {
            url = 'https://github.com/pinorobotics/rtpstalk'
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }    
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}
