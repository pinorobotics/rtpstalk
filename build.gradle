/*************************************************
gradle clean build

gradle publishToMavenLocal \
 -Ppublish=true \
 -PossrhUsername=XXX \
 -PossrhPassword=XXX

**************************************************/

plugins {
  id 'java'
  id 'com.diffplug.spotless' version '6.7.2'
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  sourceCompatibility = '17'
  targetCompatibility = '17'

  // setup spotless config for all subprojects
  def spotlessConfig = {
    spotless {
      java {
        importOrder()
        removeUnusedImports()

        // Use Android style which has 4 whitespaces instead 2 by default
        googleJavaFormat().aosp().reflowLongStrings()

          licenseHeader '''/*
 * Copyright $YEAR rtpstalk project
 * 
 * Website: https://github.com/pinorobotics/rtpstalk
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'''
      }
    }
  }

  pluginManager.withPlugin("com.diffplug.spotless", spotlessConfig);
}

ext {
  releaseFileName = "${projectName}-v${version}.zip"
}

/**
 * Following function simplifies declaring multiple packages with same versions
 * across different configurations. For example, instead of writing:
 *
 * implementation 'org.apache.maven.resolver:maven-resolver:1.7.2'
 * implementation 'org.apache.maven.resolver:maven-resolver-impl:1.7.2'
 * apiElements 'org.apache.maven.resolver:maven-resolver:1.7.2'
 * apiElements 'org.apache.maven.resolver:maven-resolver-impl:1.7.2'
 *
 * You can do:
 *
 * addDependencies(this, ["implementation", "apiElements"], "1.7.2", [
 *   'org.apache.maven.resolver:maven-resolver',
 *   'org.apache.maven.resolver:maven-resolver-impl',
 * ]);
 *
 */
void addDependencies(project, configurations, version,  packages) {
  for (def pkg: packages) {
    for (def config: configurations) {
      switch (config) {
        case "implementation":
          project.dependencies.implementation pkg + ":" + version
          break
        case "apiElements":
          project.dependencies.apiElements pkg + ":" + version
          break
        default:
          throw new UnsupportedOperationException("Configuration \"${config}\" is not supported")
      }
    }
  }
}

// gradlew requires execution of gradle-wrapper.jar which trustworthy needs to
// be checked everytime when it is updated (otherwise it do not seems secure)
// To avoid using it we rely on manual version check
if ("$gradle.gradleVersion" != "7.5")
  throw new RuntimeException("Running gradle version $gradle.gradleVersion, required 7.5");
